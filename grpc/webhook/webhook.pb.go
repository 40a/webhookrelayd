// Code generated by protoc-gen-go.
// source: webhook.proto
// DO NOT EDIT!

/*
Package webhook is a generated protocol buffer package.

It is generated from these files:
	webhook.proto

It has these top-level messages:
	WebhookRequest
	Bucket
	HeaderValue
	Header
	Request
	WebhookFilter
*/
package webhook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new customer
type WebhookRequest struct {
	// bucket info
	Bucket *Bucket `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	// incomming request
	Request *Request `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *WebhookRequest) Reset()                    { *m = WebhookRequest{} }
func (m *WebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*WebhookRequest) ProtoMessage()               {}
func (*WebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WebhookRequest) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *WebhookRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

// Bucket - bucket info
type Bucket struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Bucket) Reset()                    { *m = Bucket{} }
func (m *Bucket) String() string            { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()               {}
func (*Bucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Bucket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Bucket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HeaderValue struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HeaderValue) Reset()                    { *m = HeaderValue{} }
func (m *HeaderValue) String() string            { return proto.CompactTextString(m) }
func (*HeaderValue) ProtoMessage()               {}
func (*HeaderValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeaderValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Header struct {
	Headers map[string]*HeaderValue `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Header) GetHeaders() map[string]*HeaderValue {
	if m != nil {
		return m.Headers
	}
	return nil
}

// Request - incomming request to webhook relay service
type Request struct {
	// desired destination
	Destination string `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	// request body
	Body   []byte  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Header *Header `protobuf:"bytes,3,opt,name=header" json:"header,omitempty"`
	Method string  `protobuf:"bytes,4,opt,name=Method" json:"Method,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Request) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Request) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Request) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Request) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type WebhookFilter struct {
	Bucket      string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
}

func (m *WebhookFilter) Reset()                    { *m = WebhookFilter{} }
func (m *WebhookFilter) String() string            { return proto.CompactTextString(m) }
func (*WebhookFilter) ProtoMessage()               {}
func (*WebhookFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WebhookFilter) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *WebhookFilter) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func init() {
	proto.RegisterType((*WebhookRequest)(nil), "webhook.WebhookRequest")
	proto.RegisterType((*Bucket)(nil), "webhook.Bucket")
	proto.RegisterType((*HeaderValue)(nil), "webhook.HeaderValue")
	proto.RegisterType((*Header)(nil), "webhook.Header")
	proto.RegisterType((*Request)(nil), "webhook.Request")
	proto.RegisterType((*WebhookFilter)(nil), "webhook.WebhookFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Webhook service

type WebhookClient interface {
	// Get all Webhook requests with filter - A server-to-client streaming RPC.
	GetWebhooks(ctx context.Context, in *WebhookFilter, opts ...grpc.CallOption) (Webhook_GetWebhooksClient, error)
}

type webhookClient struct {
	cc *grpc.ClientConn
}

func NewWebhookClient(cc *grpc.ClientConn) WebhookClient {
	return &webhookClient{cc}
}

func (c *webhookClient) GetWebhooks(ctx context.Context, in *WebhookFilter, opts ...grpc.CallOption) (Webhook_GetWebhooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Webhook_serviceDesc.Streams[0], c.cc, "/webhook.Webhook/GetWebhooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &webhookGetWebhooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Webhook_GetWebhooksClient interface {
	Recv() (*WebhookRequest, error)
	grpc.ClientStream
}

type webhookGetWebhooksClient struct {
	grpc.ClientStream
}

func (x *webhookGetWebhooksClient) Recv() (*WebhookRequest, error) {
	m := new(WebhookRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Webhook service

type WebhookServer interface {
	// Get all Webhook requests with filter - A server-to-client streaming RPC.
	GetWebhooks(*WebhookFilter, Webhook_GetWebhooksServer) error
}

func RegisterWebhookServer(s *grpc.Server, srv WebhookServer) {
	s.RegisterService(&_Webhook_serviceDesc, srv)
}

func _Webhook_GetWebhooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WebhookFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebhookServer).GetWebhooks(m, &webhookGetWebhooksServer{stream})
}

type Webhook_GetWebhooksServer interface {
	Send(*WebhookRequest) error
	grpc.ServerStream
}

type webhookGetWebhooksServer struct {
	grpc.ServerStream
}

func (x *webhookGetWebhooksServer) Send(m *WebhookRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _Webhook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webhook.Webhook",
	HandlerType: (*WebhookServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWebhooks",
			Handler:       _Webhook_GetWebhooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "webhook.proto",
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x52, 0xcf, 0x4b, 0xeb, 0x40,
	0x10, 0x7e, 0x9b, 0xf4, 0x25, 0x64, 0xd2, 0xf6, 0x95, 0xe5, 0xd1, 0x17, 0xca, 0x3b, 0x84, 0x05,
	0xb1, 0x14, 0x29, 0x52, 0x41, 0xc4, 0x63, 0xc1, 0x5f, 0x87, 0x82, 0xec, 0x41, 0xcf, 0x89, 0x19,
	0x68, 0x68, 0xcd, 0x6a, 0xb2, 0x55, 0x7a, 0xf3, 0x6f, 0xf0, 0x2f, 0x96, 0xec, 0x4e, 0x42, 0x8d,
	0xa7, 0x7c, 0x33, 0xf3, 0xcd, 0x37, 0xdf, 0xce, 0x04, 0x06, 0xef, 0x98, 0xae, 0x95, 0xda, 0xcc,
	0x5f, 0x4a, 0xa5, 0x15, 0xf7, 0x29, 0x14, 0x08, 0xc3, 0x47, 0x0b, 0x25, 0xbe, 0xee, 0xb0, 0xd2,
	0xfc, 0x18, 0xbc, 0x74, 0xf7, 0xb4, 0x41, 0x1d, 0xb1, 0x98, 0x4d, 0xc3, 0xc5, 0x9f, 0x79, 0xd3,
	0xba, 0x34, 0x69, 0x49, 0x65, 0x3e, 0x03, 0xbf, 0xb4, 0x3d, 0x91, 0x63, 0x98, 0xa3, 0x96, 0x49,
	0x5a, 0xb2, 0x21, 0x88, 0x13, 0xf0, 0x6c, 0x37, 0x1f, 0x82, 0x93, 0x67, 0x46, 0x3a, 0x90, 0x4e,
	0x9e, 0x71, 0x0e, 0xbd, 0x22, 0x79, 0x46, 0x23, 0x11, 0x48, 0x83, 0xc5, 0x11, 0x84, 0xb7, 0x98,
	0x64, 0x58, 0x3e, 0x24, 0xdb, 0x1d, 0xf2, 0x31, 0x78, 0x6f, 0x35, 0xa8, 0x22, 0x16, 0xbb, 0xd3,
	0x40, 0x52, 0x24, 0x3e, 0x19, 0x78, 0x96, 0xc7, 0xcf, 0xc1, 0x5f, 0x1b, 0x54, 0x45, 0x6e, 0xec,
	0x4e, 0xc3, 0xc5, 0xff, 0xd6, 0x8b, 0x65, 0xd0, 0xa7, 0xba, 0x2a, 0x74, 0xb9, 0x97, 0x0d, 0x79,
	0x72, 0x0f, 0xfd, 0xc3, 0x02, 0x1f, 0x81, 0xbb, 0xc1, 0x3d, 0xd9, 0xab, 0x21, 0x9f, 0xc1, 0x6f,
	0x33, 0x8e, 0xde, 0xf8, 0xb7, 0xa3, 0x6b, 0x1c, 0x4a, 0x4b, 0xb9, 0x74, 0x2e, 0x98, 0xf8, 0x60,
	0xe0, 0x37, 0xab, 0x8c, 0x21, 0xcc, 0xb0, 0xd2, 0x79, 0x91, 0xe8, 0x5c, 0x15, 0xa4, 0x7a, 0x98,
	0xaa, 0x5f, 0x9f, 0xaa, 0x6c, 0x6f, 0xc4, 0xfb, 0xd2, 0xe0, 0xfa, 0x00, 0xd6, 0x5e, 0xe4, 0x76,
	0x0e, 0x60, 0x47, 0x4a, 0x2a, 0xd7, 0x7b, 0x59, 0xa1, 0x5e, 0xab, 0x2c, 0xea, 0x19, 0x65, 0x8a,
	0xc4, 0x1d, 0x0c, 0xe8, 0xa6, 0xd7, 0xf9, 0x56, 0x5b, 0xe2, 0xc1, 0x49, 0x83, 0xf6, 0x82, 0x1d,
	0x7f, 0xce, 0x0f, 0x7f, 0x8b, 0x15, 0xf8, 0x24, 0xc5, 0x97, 0x10, 0xde, 0xa0, 0xa6, 0xa8, 0xe2,
	0xe3, 0xd6, 0xd5, 0xb7, 0x59, 0x93, 0x7f, 0xdd, 0x3c, 0x2d, 0x43, 0xfc, 0x3a, 0x65, 0xa9, 0x67,
	0xfe, 0xbe, 0xb3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x95, 0xc2, 0x42, 0x8e, 0x02, 0x00,
	0x00,
}
